% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model.R
\name{Model}
\alias{Model}
\title{An R6 class for a model}
\description{
A Model specifies how a model looks like, fits and validates it, tunes
hyperparameters, stores it and predicts from it.
}
\seealso{
\code{\link[=training_camp]{training_camp()}}.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{name}}{A telling name for the model.}

\item{\code{directory}}{Store/find the \code{Model} with \code{fit_obj} set in this directory.}

\item{\code{fitter}}{Fit and validate the model with this fitting function.}

\item{\code{time_cutoffs}}{Threshold and censor the outcome accordingly.}

\item{\code{val_error_fun}}{Calculates the error of the validated predictions.}

\item{\code{hyperparams}}{Optional arguments passed to \code{fitter}.}

\item{\code{include_from_continuous_pheno}}{The names of the continuous variables in the
pheno data (to be) included in the predictor matrix.}

\item{\code{include_from_discrete_pheno}}{The names of the discrete variables in the
pheno data (to be) included in the predictor matrix.}

\item{\code{include_expr}}{Whether to include the expression data in the predictor matrix.}

\item{\code{combine_n_max_categorical_features}}{Maximum number of categorical features
to combine.}

\item{\code{combined_feature_min_positive_ratio}}{Minimum ratio of positive
observations in a combined (categorical) feature.}

\item{\code{enable_imputation}}{Overrides the \code{imputer} attribute of the \code{Data} object.}

\item{\code{fit_obj}}{The fitted object, something returned by a fitter like a \code{ptk_zerosum} S3
object.}

\item{\code{create_directory}}{Whether to create \code{directory} if it does not exist, yet.}

\item{\code{file}}{Store this Model object under this name in \code{directory}.}

\item{\code{li_var_suffix}}{Append this to the names of features from the pheno data
when adding them to the predictor matrix.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Model-new}{\code{Model$new()}}
\item \href{#method-Model-fit}{\code{Model$fit()}}
\item \href{#method-Model-predict}{\code{Model$predict()}}
\item \href{#method-Model-clone}{\code{Model$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Model-new"></a>}}
\if{latex}{\out{\hypertarget{method-Model-new}{}}}
\subsection{Method \code{new()}}{
Create a new Model instance.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Model$new(
  name,
  fitter,
  directory,
  time_cutoffs,
  val_error_fun,
  hyperparams = NULL,
  include_from_continuous_pheno = NULL,
  include_from_discrete_pheno = NULL,
  include_expr = TRUE,
  combine_n_max_categorical_features = 1L,
  combined_feature_min_positive_ratio = 0.04,
  enable_imputation = TRUE,
  file = "model.rds",
  create_directory = TRUE,
  li_var_suffix = "++"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{string. A telling name for the model.}

\item{\code{fitter}}{function. Fit the model to the data and validate it with this fitting
function. See \code{\link[=fitter_prototype]{fitter_prototype()}} for its required interface. patroklos provides
two fitters out of the box: \code{\link[=ptk_zerosum]{ptk_zerosum()}}, a wrapper around \code{\link[zeroSum:zeroSum]{zeroSum::zeroSum}} and
\code{\link[=ptk_ranger]{ptk_ranger()}}, a wrapper around \code{\link[ranger:ranger]{ranger::ranger()}}. To tune more than just one
combination of hyperparameters, decorate a fitter with \code{\link[=multitune]{multitune()}}.}

\item{\code{directory}}{string. Store/find the \code{Model} with \code{fit_obj} set in this directory.}

\item{\code{time_cutoffs}}{numeric vector. A model-agnostic hyperparameter that changes the
response during \emph{training} as follows: For every value of \code{time_cutoffs}, specify a
model on the following response data:
\itemize{
\item For Cox response, censor all patients where the event occurred after
\code{time_cutoffs} at this value and train the specified model.
\item For binary response, binarize the outcome depending on whether it
occurred before or after this value.
}

We already tune this hyperparameter and only store the best model according to
validation as \code{fit_obj} and report the chosen time cutoff as \code{time_cutoff} attribute
in it.}

\item{\code{val_error_fun}}{Function to calculate the error of validated predictions. For its
interface, see \code{\link[=val_error_fun_prototype]{val_error_fun_prototype()}}.}

\item{\code{hyperparams}}{list. Optional arguments passed to \code{fitter}, e.g. alpha
in case of an elastic net.}

\item{\code{include_from_continuous_pheno}}{vector of strings. The names of the
\emph{continuous} variables in the pheno data (to be) included in the predictor matrix.
Default is \code{NULL}, which means no continuous pheno variables are or will be included.}

\item{\code{include_from_discrete_pheno}}{vector of strings. The names of the \emph{discrete}
variables in the pheno data (to be) included in the predictor matrix. A discrete
variable with n levels will be dichotomized into n-1 binary dummy variables. Default is
\code{NULL}, which means no discrete pheno variables are or will be included.}

\item{\code{include_expr}}{logical. Whether to include the expression data in the predictor
matrix.}

\item{\code{combine_n_max_categorical_features}}{integer. Maximum number of categorical features
to combine in predicting features.}

\item{\code{combined_feature_min_positive_ratio}}{numeric. Minimum ratio of positive
observations in a combined (categorical) feature. This attribute together
with \code{combine_n_max_categorical_features} governs which combined categorical
features the predictor matrix will contain: add a combination of the levels of distinct
categorical features to the predictor matrix after imputation if at most
\code{combine_n_max_categorical_features} are involved in the combination and if the
combination is (expected to be) there in at least \code{combined_feature_min_positive_ratio}
of the samples.}

\item{\code{enable_imputation}}{logical. If \code{FALSE}, it overrides the \code{imputer} attribute of
the \code{Data} object and we do not impute.}

\item{\code{file}}{string. The name of the model-fit_obj file inside \code{directory}.
Default is \code{"fit_obj.rds"}.}

\item{\code{create_directory}}{logical. Whether to create \code{directory} if it does not exist, yet.
Default is \code{TRUE}.}

\item{\code{li_var_suffix}}{string. Append this to the names of features from the pheno
data when adding them to the predictor matrix. Default is \code{"++"}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A \code{Model} R6 object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Model-fit"></a>}}
\if{latex}{\out{\hypertarget{method-Model-fit}{}}}
\subsection{Method \code{fit()}}{
Fit the model to a data set, validate it and tune hyperparameters.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Model$fit(data, update_model_shell = FALSE, quiet = FALSE, msg_prefix = "")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{Data object. Read it in if needed.}

\item{\code{update_model_shell}}{logical. If \code{TRUE} and we find a stored model with \code{fit_obj}
not being NULL, we set the \code{fit_obj} attribute of the model to the found \code{fit_obj}
and save it. This way, we can keep stored \code{Model}s up-to-date with changes in the
\code{Model} class.}

\item{\code{quiet}}{logical. Whether to suppress messages. Default is \code{FALSE}.}

\item{\code{msg_prefix}}{string. Prefix for messages. Default is \code{""}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The \code{Model} object itself with the \code{fit_obj} attribute set
to the object tuned over \code{time_cutoffs}, \code{combine_n_max_categorical_features}
and \code{hyperparams}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Model-predict"></a>}}
\if{latex}{\out{\hypertarget{method-Model-predict}{}}}
\subsection{Method \code{predict()}}{
Predict for a data set.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Model$predict(data, quiet = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{Data object. Specifications on the data. Read it in if
needed.}

\item{\code{quiet}}{logical. Whether to suppress messages. Default is \code{FALSE}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A named list of length 3:
\itemize{
\item \code{"predicted"}: named numeric vector with predicted response,
\item \code{"actual"}: named numeric vector with actual response,
\item \code{"cox_mat"}: named matrix with columns \code{"time_to_event"}, \code{"event"}, \code{"hazard"},
where hazard again is the predicted response. This matrix is helpful to calculate
hazard ratios or logrank p-values.
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Model-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Model-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Model$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
