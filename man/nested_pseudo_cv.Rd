% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nested_cv.R
\name{nested_pseudo_cv}
\alias{nested_pseudo_cv}
\title{Nested cross-validation for second-stage OOB predictions}
\usage{
nested_pseudo_cv(
  x,
  y,
  fitter1,
  fitter2,
  hyperparams1,
  hyperparams2,
  oob = c(FALSE, TRUE),
  metric = c("accuracy", "roc_auc", "binomial_log_likelihood")
)
}
\arguments{
\item{x}{A numeric matrix holding the predictor features: rows are samples and
columns are features.}

\item{y}{A numeric vector holding the response variable.}

\item{fitter1}{A \emph{patroklos-compliant fitter with CV tuning} (see README for
more details).}

\item{fitter2}{A \emph{patroklos-compliant fitter with validated predictions} (see
README for more details).}

\item{hyperparams1}{A named list with hyperparaters we will pass to \code{fitter1}.}

\item{hyperparams2}{A named list with hyperparameters for the late model.
Unlike \code{hyperparams1}, we call \code{fitter2} for every combination of values in
\code{hyperparams2} and lambda value from \code{fitter1}.}

\item{oob}{A logical vector of length 2. If the first element is \code{TRUE}, train
the late model on out-of-bag, else cross-validated predictions from the early
model. If the second element is \code{TRUE}, evaluate the entire model on OOB,
else cross-validated predictions.}

\item{metric}{A character string or a function. The optimal combination of
hyperparameters yield the model whose pseudo-cv predictions maximize this
metric.
\itemize{
\item If a character string, it must be one of \code{"accuracy"}, \code{"roc_auc"}, or
\code{"binomial_log_likelihood"}. Make sure that \code{cv_predict} or \code{oob_predict}
attribute of the fit object returned by \code{fitter2} holds predictions in
\code{c(0, 1)} if \code{metric == "accuracy"}, and probabilities in \code{c(0, 1)} if
\code{metric == "binomial_log_likelihood"}.
\item If a function, it must take two arguments (the true outcome and the predicted
outcome) and return a numeric. Do this if you want to provide a custom metric.
}}
}
\value{
An S3 object with class \code{nested_fit}, the model with the best
performance according to the out-of-bag (OOB) predictions based on cross-validated
predictions from the early model.
}
\description{
Perform a nested cross-validation for a late-integration scheme,
i.e., perform a cross-validation for the early model and then train second-stage
models on cross-validated predictions and evaluate the entire models via
out-of-bag (OOB) predictions of the second-stage models (usually a random
forest).
}
\details{
This function does hyperparameter tuning for a nested model, i.e.,
a so-called early model makes predictions from the high-dimensional part of
data (e.g. RNA-seq, Nanostring), we then provide these predictions as a
one-dimensional feature together with new features to a late model. Both the
early and late model try to predict \code{y}. To not provide the late model overly
optimistic (since overfitted) predictions during training, we feed its
training algorithm with values comparable to those we would observe for
independent test samples, i.e. either cross-validated or out-of-bage (OOB)
predictions. To evaluate the overall model, we do a second cross-validation
or use OOB predictions.

Note that the predictions we get for the nested model are not predictions as
one would observe for independent test samples:
Let's fix sample i. We get the OOB/CV prediction for sample i from models/
a model whose training algorithm didn't see sample i itself. But it probably
saw the prediction for a sample j != i according to an early model whose
training algorithm had seen sample i. Hence the term "pseudo" in the name of
this function. This heuristic saves a factor \code{n_folds} computation time
compared to a full nested cross-validation.
}
