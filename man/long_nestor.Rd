% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nestor.R
\name{long_nestor}
\alias{long_nestor}
\title{Nested cross-validation for second-stage validated predictions}
\usage{
long_nestor(x, y, val_error_fun, fitter1, fitter2, hyperparams1, hyperparams2)
}
\arguments{
\item{x}{data as a numeric matrix object (rows=samples). The zero-sum
regression requires data on the log scale, i.e. x should be
log-transformed data.}

\item{y}{Named list with entries
\itemize{
\item \code{"bin"}, a named numeric one-column matrix, binary response to be used
for training,
\item \code{"cox"}, a named numeric two-column matrix to be used for training, time to
event and event (0 = censoring, 1 = event) in first and second column, respectively.
\item \code{"true"}, a named numeric one-column matrix, binary response to be used for
calculating the CV error.
}}

\item{val_error_fun}{Function used to calculate the error of independently
validated predictions. Must take two numeric vector of equal length:
\code{y} and \code{y_hat}, the true and predicted outcomes, respectively, and
return a numeric scalar; the lower, the better the model. See
\code{\link[=error_rate]{error_rate()}} or \code{\link[=neg_roc_auc]{neg_roc_auc()}} for examples.}

\item{fitter1}{A \emph{patroklos-compliant fitter with CV tuning} (see README for
more details).}

\item{fitter2}{A \emph{patroklos-compliant fitter with validated predictions} (see
README for more details). If it returns \code{"next"}, we skip the current
combination of hyperparameters and set its metric to \code{-Inf}.}

\item{hyperparams1}{A named list with hyperparaters we will pass to \code{fitter1}.}

\item{hyperparams2}{A named list with hyperparameters for the late model.
Unlike \code{hyperparams1}, we call \code{fitter2} for every combination of values in
\code{hyperparams2} and lambda value from \code{fitter1}.}
}
\value{
An S3 object with class \code{nested_fit}, the model with the best
performance according to validated predictions assessed with \code{metric}.
}
\description{
Perform a nested cross-validation for a late-integration scheme,
i.e., perform a cross-validation for the early model and then train second-stage
models on validated predictions and evaluate the entire models via
validated predictions made by the late model. "Validated prediction" means
predictions made on independent data like out-of-bag (OOB) or cross-validated
(CV) predictions.
}
\details{
This function does hyperparameter tuning for a nested model, i.e.,
a so-called early model makes predictions from the high-dimensional part of
data (e.g. RNA-seq, Nanostring), we then provide these predictions as a
one-dimensional feature together with new features to a late model. Both the
early and late model try to predict \code{y}. To not provide the late model overly
optimistic (since overfitted) predictions during training, we feed its
training algorithm with values comparable to those we would observe for
independent test samples, i.e. either cross-validated or out-of-bage (OOB)
predictions. To evaluate the overall model, we do a second cross-validation
or use OOB predictions.

Note that the predictions we get for the nested model are not predictions as
one would observe for independent test samples:
Let's fix sample i. We get the OOB/CV prediction for sample i from models/
a model whose training algorithm didn't see sample i itself. But it probably
saw the prediction for a sample j != i according to an early model whose
training algorithm had seen sample i. Hence the term "pseudo" in the name of
this function. This heuristic saves a factor \code{n_folds} computation time
compared to a full nested cross-validation.
}
